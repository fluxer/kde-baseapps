# -*- coding: utf-8 -*-
# kate: space-indent on; hl python;

def fori(s=None):
    if s is None:
        return 'for i in xrange(%{cursor}):\n\t'
    else:
        return '''for i in xrange({0}):\n\t%{{cursor}}'''.format(s)

# cannot define a function 'class' as class is a keyword
def _class(s=None):
    if s is None:
        return '''\
class %{cursor}:
\tdef __init__(self):
\t\t
'''
    else:
        print("** PYTHON CLASS EXPANDER: s="+repr(s))
        base, parents = [x.strip() for x in s.split(',', 1)]
        head = '%s(%s)' % (base, parents) if parents else base
        s = '''\
class {0}:
\tdef __init__(self%{{cursor}}):
\t\t'''.format(head)
        if parents:
            for parent in parents.split(','):
                parent = parent.strip()
                s += '%s.__init__(self)\n\t\t' % parent
        return s + '\n'
_class.__name__ = 'class'


def property(name):
    # cater for the most common case -- a get and a set property
    return '''\
def _get_{0}s(self):
\t%{{cursor}}
def _set_{0}s(self, {0}s):
\t
{0}s = property(_get_{0}s, _set_{0}s)'''.format(name)


def main():
    return '''def main():
\t%{cursor}

if __name__ == '__main__':
\tmain()
'''
